name: Create Branch and PR from Issue Label

on:
  issues:
    types: [labeled]

jobs:
  create_branch_and_pr:
    if: github.event.label.name == 'decision'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Authorization
        env:
          ACTOR: ${{ github.actor }}
        run: |
          # Get username of GitHub account that triggered this flow
          opener=$ACTOR

          # Get list of approved contributors
          contributors=$(curl https://api.github.com/repos/Monstarrrr/Rebutify/contributors | jq -r '[.[] | select(.type == "User") | .login] | join(",")')

          # Convert the comma-separated string to an array
          IFS=',' read -r -a contributor_array <<< "$contributors"

          # Check if triggering user is in the array
          if [[ ! " ${contributor_array[@]} " =~ " $opener " ]]; then
            echo "Triggering user is unauthorized."
            exit 1
          fi

      # Fetch the repository contents to ensure the latest code is available
      - name: Checkout
        uses: actions/checkout@v4.1.7

      - name: Extract subject and category from issue title
        id: extract_info
        env:
          TITLE: ${{ github.event.issue.title }}
        run: |
          title="$TITLE"
          if [[ "$title" =~ ^Opening\ decision\ on\ ([^/]+)(/([^/]+))?$ ]]; then
            subject=$(echo "${BASH_REMATCH[3]}" | tr -d ' ')
            category=$(echo "${BASH_REMATCH[1]}" | tr -d ' ')
            if [[ -z "$category" ]]; then
              category=""
            fi
            echo "subject=$subject" >> $GITHUB_ENV
            echo "category=$category" >> $GITHUB_ENV
          else
            echo "Issue title does not follow the required format: 'Opening decision on [category]/[subject]'"
            exit 1
          fi

      - name: Create new branch
        id: new_branch
        env:
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          ISSUE_TITLE: ${{ github.event.issue.title }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git checkout -b "docs/${ISSUE_NUMBER}_decision-$subject"

      - name: Create directory
        id: create_directory
        run: |
          # Determine the directory structure
          if [[ -z "$category" ]]; then
            dir_path="docs/decisions"
          else
            dir_path="docs/decisions/$category"
          fi
          echo "The directory structure is: $dir_path"

          # Create the directory structure for the documentation
          mkdir -p "$dir_path"

      - name: Create decision file
        id: create_file
        run: |
          # Create a new markdown file with the decision template as content
          cat docs/decisions/_template.md > "$dir_path/${subject}_DECISION.md"
          echo "The decision file has been created at: $dir_path/${subject}_DECISION.md"
          
      - name: Commit changes
        id: commit_changes
        run: |
          echo "Adding changes..."
          git add .
          git status
          echo "Committing changes..."
          git commit -m "$ISSUE_TITLE"
          git status

      - name: Push changes
        id: push_changes
        env:
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          ISSUE_TITLE: ${{ github.event.issue.title }}
        run: |
          echo "Currently on branch:"
          git rev-parse --abbrev-ref HEAD
          echo "Pushing changes..."
          git push origin HEAD:docs/${{ISSUE_NUMBER}}_decision-${subject}
          git status
          echo "git log:"
          git log --oneline -n 3
          echo "subject=$subject" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        run: |
          gh pr create --base main --head "docs/${ISSUE_NUMBER}_decision-${subject}" --draft --label decision --label documentation --title "Add documentation for decision: ${ISSUE_TITLE}" --body "Created by Github action from ${ISSUE_NUMBER}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
